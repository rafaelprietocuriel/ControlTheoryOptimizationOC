//
// standardmodelImplicitControlDynamicsJacobian.oct
//
function J=$MODELNAME$ImplicitControlDynamicsJacobian($INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$,$ARCVAR$)
%
% returns the Jacobian of the implicit control dynamics with respect to the state, 
% costate and implicit control.
%
% J=$UPPERMODELNAME$IMPLICITCONTROLDYNAMICSJACOBIAN($INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$,$ARCVAR$)
%
$INFODETAILS$
	
dim=$IMPLICITCONTROLNUM$; % number of implicit controls
	
%-----------------------
% numerical calculation
%-----------------------
%numJacOpt.diffvar=2;
%numJacOpt.vectvars=[];
%if dim(arcid+1)>0
%	Jnum=numjaccsd(@$MODELNAME$ImplicitControlDynamics,{$INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$(:),$ARCVAR$},dim($ARCVAR$+1),numJacOpt);
%	Jnum=Jnum(:,1:($STATECOSTATENUM$+dim($ARCVAR$+1)));
%else
%	Jnum=[];
%end
%J=Jnum;
%return
%-----------------------
% analytic calculation
%-----------------------
$CONTROLDYNAMICSVAR$=zeros($CONTROLNUM$,1);
if dim($ARCVAR$+1)
	[tmp,dudx,coord]=$MODELNAME$ImplicitControlDynamics($INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$,$ARCVAR$);
	$CONTROLDYNAMICSVAR$(coord)=tmp;
	PUU=$MODELNAME$D2LagrangianDU2($INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$,$ARCVAR$);
	PUU=reshape(PUU,dim($ARCVAR$+1),dim($ARCVAR$+1));
	GX=$MODELNAME$ImplicitGX($INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$,$ARCVAR$,$CONTROLDYNAMICSVAR$);
	GU=$MODELNAME$ImplicitGU($INDEPENDENT$,$DEPENDENTVAR$,$PARVAR$,$ARCVAR$,$CONTROLDYNAMICSVAR$);
	
	J(1:dim($ARCVAR$+1),1:$STATECOSTATENUM$)=-PUU\GX;
	J(1:dim($ARCVAR$+1),$STATECOSTATENUM$+(1:dim($ARCVAR$+1)))=-PUU\GU;
else
	J=[];
end

% We used the function G=LUX*dot-X+LUU*dot-u, yielding G_X+G_u*dudx+G_{dot-u}D(dot-u(X))/DX
% with G_{dot-u}=LUU and D(dot-u(X))/DX the total derivative of dot-u with respect to X.
% The total derivative of D(dot-u(X))/DX = d(dot-u(X))/du*dU/dX+d(dot-u(X))/dX = -PUU\(G_X+G_u*dudx)
% this yields d(dot-u(X))/dX (partial derivative with respect to X) = -PUU\GX and
% d(dot-u(X))/du (partial derivative with respect to u) = -PUU\GU