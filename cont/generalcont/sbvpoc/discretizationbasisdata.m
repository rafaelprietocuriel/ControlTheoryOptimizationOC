function [rho,psi,psival,w,psi0,psival0,psivalequi,psivalequi0]=discretizationbasisdata(maxorder,mode,numcols)

switch mode(1)
    case 'g'
        [rho w]=gauss(numcols);
    case 'l'
        rho=lobatto(numcols);
        [dum w]=gauss(numcols);
end
m=length(rho);
psi=[];
for jj=1:maxorder
    for ii=1:m
        psi(ii,1+maxorder-jj:m+maxorder,jj)=Psi(ii,rho,jj);
    end
end
psival=[];
for jj=1:maxorder
    equidistnode=0:1/(m-jj+1):1;
    for ii=1:m
        % evaluate the integrated iith Lagrange polynomials at the
        % collocation points, one and zero
        psival(jj,ii,1:m)=polyval(psi(ii,:,jj),rho(1:m));
        psival(jj,ii,m+1)=polyval(psi(ii,:,jj),1);
        psival(jj,ii,m+2)=polyval(psi(ii,:,jj),0);
        psivalequi(jj,ii,1:m+1)=polyval(psi(ii,:,1),equidistnode);
    end
end
psi0=[];
equidistnode0=0:1/(m-1):1;
for ii=1:m
    psi0(ii,:,1)=Psi(ii,rho,0);
    psival0(1,ii,1:m)=polyval(psi0(ii,:,1),rho(1:m));
    psival0(1,ii,m+1)=polyval(psi0(ii,:,1),1);
    psival0(1,ii,m+2)=polyval(psi0(ii,:,1),0);
    psivalequi0(1,ii,1:m)=polyval(psi0(ii,:,1),equidistnode0);
end


function Psireturn=Psi(n,rho,nr)
prod=1;
for s=1:length(rho)
    if (s~=n)
        prod=conv(prod,[1 -rho(s)])/(rho(n)-rho(s));
    end
end
for s=1:(nr)
    prod=polyint(prod);
end
Psireturn=prod;

function [rho w]=gauss(k)

[rho w]=lgwt(k,0,1);

function [x,w]=lgwt(N,a,b)

% lgwt.m
%
% This script is for computing definite integrals using Legendre-Gauss 
% Quadrature. Computes the Legendre-Gauss nodes and weights  on an interval
% [a,b] with truncation order N
%
% Suppose you have a continuous function f(x) which is defined on [a,b]
% which you can evaluate at any x in [a,b]. Simply evaluate it at all of
% the values contained in the x vector to obtain a vector f. Then compute
% the definite integral using sum(f.*w);
%
% Written by Greg von Winckel - 02/25/2004
N=N-1;
N1=N+1; N2=N+2;

xu=linspace(-1,1,N1)';

% Initial guess
y=cos((2*(0:N)'+1)*pi/(2*N+2))+(0.27/N1)*sin(pi*xu*N/N2);

% Legendre-Gauss Vandermonde Matrix
L=zeros(N1,N2);

% Derivative of LGVM
Lp=zeros(N1,N2);

% Compute the zeros of the N+1 Legendre Polynomial
% using the recursion relation and the Newton-Raphson method

y0=2;

% Iterate until new points are uniformly within epsilon of old points
while max(abs(y-y0))>eps
    
    
    L(:,1)=1;
    Lp(:,1)=0;
    
    L(:,2)=y;
    Lp(:,2)=1;
    
    for k=2:N1
        L(:,k+1)=( (2*k-1)*y.*L(:,k)-(k-1)*L(:,k-1) )/k;
    end
 
    Lp=(N2)*( L(:,N1)-y.*L(:,N2) )./(1-y.^2);   
    
    y0=y;
    y=y0-L(:,N2)./Lp;
    
end

% Linear map from[-1,1] to [a,b]
[x idx]=sort((a*(1-y)+b*(1+y))/2);      
x=x.';
% Compute the weights
w=(b-a)./((1-y.^2).*Lp.^2)*(N2/N1)^2;
w=w(idx);
w=w.';

function [rho]=lobatto(k)
if k<2 || k>15
    error('Die Anzahl der Punkte muss >=2 und <=9 sein!');
end
switch k
    case 2
        rho=[0,1];
    case 3
        rho=[0., .500000000000000000000000000000, 1.];
    case 4
        rho=[0., .276393202250021030359082633127, .723606797749978969640917366873, 1.];
    case 5
        rho=[0., .172673164646011428100853771876, .500000000000000000000000000000, .827326835353988571899146228124, 1.];
    case 6
        rho=[0., .117472338035267653574498513019, .357384241759677451842924502980, .642615758240322548157075497020, .882527661964732346425501486981, 1.];
    case 7
        rho=[0., .84888051860716535063983893017e-1, .265575603264642893098114059046, .500000000000000000000000000000, .734424396735357106901885940954, .915111948139283464936016106983, 1.];
    case 8
        rho=[0., .641299257451966923312771193897e-1, .204149909283428848927744634301, .395350391048760565615671369827, .604649608951239434384328630173, .795850090716571151072255365699, .935870074254803307668722880610, 1.00000000000000000000000000000];
    case 9
        rho=[0., .501210022942699213438273777908e-1, .161406860244631123277057286454, .318441268086910920644623965646, .500000000000000000000000000000, .681558731913089079355376034354, .838593139755368876722942713546, .949878997705730078656172622209, 1.00000000000000000000000000000];
    case 10
        rho=[0., .402330459167705930855336695888e-1, .130613067447247462498446912570, .261037525094777752169412453634, .417360521166806487686890117021, .582639478833193512313109882979, .738962474905222247830587546366, .869386932552752537501553087430, .959766954083229406914466330411, 1.00000000000000000000000000000];
    case 11
        rho=[0., .329992847959704328338629319503e-1, .107758263168427790688791091946, .217382336501897496764518015261, .352120932206530304284044242220, .500000000000000000000000000000, .647879067793469695715955757780, .782617663498102503235481984739, .892241736831572209311208908054, .967000715204029567166137068050, 1.00000000000000000000000000000];
    case 12
        rho=[0., .275503638885588882962099308484e-1, .903603391779966608256792091415e-1, .183561923484069661168797572778, .300234529517325533867825104217, .431723533572536222567969072130, .568276466427463777432030927870, .699765470482674466132174895783, .816438076515930338831202427222, .909639660822003339174320790858, .972449636111441111703790069152, 1.00000000000000000000000000000];
    case 13
        rho=[0., .233450766789180440515472676223e-1, .768262176740638415670371964506e-1, .156905765459121286963620480217, .258545089454331899126531383182, .375356534946880003715663149813, .500000000000000000000000000000, .624643465053119996284336850187, .741454910545668100873468616818, .843094234540878713036379519783, .923173782325936158432962803549, .976654923321081955948452732378, 1.00000000000000000000000000000];
    case 14
        rho=[0., .200324773663695493224499189923e-1, .660994730848263744998898985459e-1, .135565700454336929707663799740, .224680298535676472341688647070, .328637993328643577478048298179, .441834065558148066170611645132, .558165934441851933829388354868, .671362006671356422521951701821, .775319701464323527658311352930, .864434299545663070292336200260, .933900526915173625500110101454, .979967522633630450677550081008, 1.00000000000000000000000000000];
    case 15
        rho=[0., .173770367480807136020743039652e-1, .574589778885118505872991842589e-1, .118240155024092399647940762012, .196873397265077144438235030682, .289680972643163759539051530631, .392323022318102880887160276864, .500000000000000000000000000000, .607676977681897119112839723136, .710319027356836240460948469369, .803126602734922855561764969318, .881759844975907600352059237988, .942541022111488149412700815741, .982622963251919286397925696035, 1.00000000000000000000000000000];
end
